1. Addition of array of n numbers

#include <xc.h>
#include <stdio.h>
#include <pic18f458.h>
void main(){
    int a[4]={1,2,3,4};
    int sum=0;
    for(int i=0;i<4;i++)
    {
        sum=sum+a[i];
    }
    TRISA = 0;
    PORTA = sum;
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------

2. Multiply & divide menu driven(variable choice)

#include <xc.h>
#include <stdio.h>

void multiply(int n1, int n2){
    int result = n1 * n2;
    LATD = result & 0xFF;
    LATE = (result >> 8) & 0x01;
}

void divide(int n1, int n2){
    int ans = n1 / n2;
    LATD = ans;
}

void main() {
    int n1 = 0, n2 = 0, op = 0;
    
    TRISA = 1;
    TRISB = 1;
    TRISC = 1;
    TRISD = 0;

    n1 = 4;
    n2 = 2;
    op = 1;

    switch(op){
        case 1:
            multiply(n1, n2);
            break;
        case 2:
            divide(n1, n2);
            break;
        default:
            LATD = 0;
            break;
    }    
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

3.Multiply & divide menu driven(Digital Pin Choice)

#include <xc.h>
#include <stdio.h>

void multiply(int n1, int n2){
    int result = n1 * n2;
    LATD = result;
}

void divide(int n1, int n2){
    int ans = n1 / n2;
    LATD = ans;
}

void main() {
    int n1 = 0, n2 = 0, op = 0;
    
    TRISA = 1;
    TRISB = 1;
    TRISC = 1;
    TRISD = 0;

    n1 = LATA;
    n2 = LATB;
    op = LATC;

    switch(op){
        case 1:
            multiply(n1, n2);
            break;
        case 2:
            divide(n1, n2);
            break;
        default:
            LATD = 0;
            break;
    }    
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------


4.Sorting in Ascending and descending order of number

//Ascending order

#include <xc.h>
#include<stdio.h>
void main() {

    int a[4] = {2,1,3,5};
    
    for(int i = 0 ;i< 3;i++){
        for(int j = 0 ; j< i-1;j++){
            if(a[j]>a[j+1]){
                int temp = a[j];
                a[j] = a[j+1];
                a[j+1] = temp;
            }
        }
    }
    
     
    
    TRISA =0;
    TRISB =0;
    TRISC =0;
    TRISD =0;
    
    PORTA=a[0];
    PORTB=a[1];
    PORTC=a[2];
    PORTD=a[3];
    
}


//Descending order

#include <xc.h>
#include<stdio.h>
void main() {

    int a[4] = {2,1,3,5};
    
    for(int i = 0 ;i< 3;i++){
        for(int j = 0 ; j< i-1;j++){
            if(a[j]<a[j+1]){
                int temp = a[j];
                a[j] = a[j+1];
                a[j+1] = temp;
            }
        }
    }
    
     
    
    TRISA =0;
    TRISB =0;
    TRISC =0;
    TRISD =0;
    
    PORTA=a[0];
    PORTB=a[1];
    PORTC=a[2];
    PORTD=a[3];
    
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

5.Sorting(variable input)

#include <xc.h>

void sortAscending(int arr[], int size) {
    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

void sortDescending(int arr[], int size) {
    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            if (arr[j] < arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

void main() {
    int numbers[4] = {4, 1, 3, 2};
    int choice = 0;

    TRISE = 0x01;
    TRISA = 0x00;
    TRISB = 0x00;
    TRISC = 0x00;
    TRISD = 0x00;

    while (1) {
        choice = 1;

        if (choice == 0) {
            sortAscending(numbers, 4);
        } else if (choice == 1) {
            sortDescending(numbers, 4);
        }

        PORTA = numbers[0];
        PORTB = numbers[1];
        PORTC = numbers[2];
        PORTD = numbers[3];
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

6. Sorting(Digital Pin Input)

#include <xc.h>

void sortAscending(int arr[], int size) {
    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

void sortDescending(int arr[], int size) {
    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            if (arr[j] < arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

void main() {
    int numbers[4] = {4, 1, 3, 2};
    int choice = 0;

    TRISE = 0x01;
    TRISA = 0x00;
    TRISB = 0x00;
    TRISC = 0x00;
    TRISD = 0x00;

    while (1) {
        choice = LATE & 0x01;

        if (choice == 0) {
            sortAscending(numbers, 4);
        } else if (choice == 1) {
            sortDescending(numbers, 4);
        }

        PORTA = numbers[0];
        PORTB = numbers[1];
        PORTC = numbers[2];
        PORTD = numbers[3];
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------

7.LED Blinking using specified delay

#include <xc.h>

void delay(unsigned int time){
    int i, j;
    for(i = 0; i < time; i++){
        for(j = 0; j < 5000; j++){};
    }
}

void main(void) {
    TRISB = 0x00;
    LATB = 0xAA;

    while(1){
        LATB = ~LATB;
        delay(20);
    }
    
    return;
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

8. Buzzer on/off

#include <pic18f4550.h>

#define Buzzer LATAbits.LATA5
unsigned int count = 0;

void __interrupt() Timer1_ISR()
{
    if(TMR1IF==1)
    {
        TMR1L = 0x20;
        TMR1H = 0xD1;
        count++;

        if (count >= 1000)
        {
            Buzzer = ~Buzzer;
            count = 0;
        }
        TMR1IF = 0;
    }
}

void main()
{
    TRISB = 0;
    TRISAbits.TRISA5 = 0;
    GIE = 1;
    PEIE = 1;
    TMR1IE = 1;
    TMR1IF = 0;
    T1CON = 0x80;
    TMR1L = 0x20;
    TMR1H = 0xD1;
    TMR1ON = 1;

    while(1);
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------


9. a.  Relay

#include <xc.h>
#include <pic18f4550.h>

#pragma config FOSC = HS 
#pragma config WDT = OFF       
#pragma config LVP = OFF        
#pragma config BOR = OFF        

#define _XTAL_FREQ 8000000      
#define RELAY_TRIS  TRISAbits.TRISA4
#define RELAY_LAT  LATAbits.LATA4
#define INT1_PIN  TRISBbits.TRISB1

unsigned char relay_flag = 0;

void t_relay(){
	relay_flag = relay_flag ? 0 : 1 ;
	RELAY_LAT = relay_flag;
}

void setup_int(){
    INT1_PIN  = 1; 
    INTCON2bits.INTEDG1 = 0; 
    INTCON3bits.INT1IF = 0; 
    INTCON3bits.INT1IE = 1;
    GIE = 1;                
    PEIE = 1;            
}


void setup_relay(){
    RELAY_TRIS = 0;  
    RELAY_LAT = 0;   
}

void __interrupt() handle_interrupts() {
    if (INTCON3bits.INT1IF) { 
	t_relay();
        INTCON3bits.INT1IF = 0;    
    }
}

void main(void){
    setup_relay();
    setup_int();
    
    while(1){
        
    }
}


9.b. Relay

#include <xc.h>
#include <pic18f4550.h>

#pragma config FOSC = HS, WDT = OFF, LVP = OFF, BOR = OFF
#define _XTAL_FREQ 8000000

volatile unsigned char relayState = 0;

void initSystem(void) {
    TRISBbits.TRISB1 = 1;
    TRISAbits.TRISA4 = 0;
    LATAbits.LATA4 = 0;
    INTCON3bits.INT1IE = 1;
    INTCON3bits.INT1IF = 0;
    INTCON2bits.INTEDG1 = 0;
    GIE = 1;
    PEIE = 1;
}

void __interrupt() ISR(void) {
    if (INTCON3bits.INT1IF) {
        LATAbits.LATA4 = relayState = !relayState;
        INTCON3bits.INT1IF = 0;
    }
}

void main(void) {
    initSystem();
    while(1);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

10. DC Motor
(both direction)


#include <pic18f4550.h>

#define FREQ_PWM 50

void initPWM() {
    TRISCbits.TRISC1 = 0;
    TRISCbits.TRISC2 = 0;
    T2CONbits.T2CKPS = 0b11;
    T2CONbits.TMR2ON = 1;
    PR2 = 150;
    CCP1CONbits.CCP1M = 0b1100;
    CCP2CONbits.CCP2M = 0b1100;
    TRISCbits.TRISC1 = 0;
    TRISCbits.TRISC2 = 0;
    CCPR1L = 128;
    CCPR2L = 128;
    INTCONbits.GIE = 1;
}

void setPWMDutyCycle(unsigned char motor, unsigned char dutyCycle) {
    if (motor == 1) {
        CCPR1L = dutyCycle;
    } else if (motor == 2) {
        CCPR2L = dutyCycle;
    }
}

void delay_ms(unsigned int ms) {
    unsigned int i, j;
    for(i = 0; i < ms; i++) {
        for(j = 0; j < 1000; j++);
    }
}

void main() {
    initPWM();
    setPWMDutyCycle(1, 128);
    setPWMDutyCycle(2, 128);

    while(1) {
        for (unsigned char duty = 0; duty < 255; duty++) {
            setPWMDutyCycle(1, duty);
            delay_ms(50);
        }
        for (unsigned char duty = 255; duty > 0; duty--) {
            setPWMDutyCycle(1, duty);
            delay_ms(50);
        }
        for (unsigned char duty = 0; duty < 255; duty++) {
            setPWMDutyCycle(2, duty);
            delay_ms(50);
        }
        for (unsigned char duty = 255; duty > 0; duty--) {
            setPWMDutyCycle(2, duty);
            delay_ms(50);
        }
    }
}


10. DC MOTOR
(ONE DIRECTION)


#include<pic18f4550.h>

unsigned char count=0;

void timer2Init(void)
{
    T2CON   =   0b00000010;
    PR2     =   0x95;
}

void delay(unsigned int time)
{
    unsigned int i,j;
    for(i=0;i<time;i++)
        for(j=0;j<1000;j++);
}

void main(void)
{
    unsigned int i;
    TRISCbits.TRISC1    = 0;
    TRISCbits.TRISC2    = 0;
    LATCbits.LATC1      = 0;
    CCP1CON  =   0b00111100;
    CCPR1L   =   0x0F;
    timer2Init();
    TMR2ON = 1;

    while(1)
    {
        for(i=15;i<150;i++)
        {
            CCPR1L = i;
            delay(100);
        }
        for(i=150;i>15;i--)
        {
            CCPR1L = i;
            delay(100);
        }
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

11. UART Serial Communication

#include <pic18f4550.h>
#include <xc.h>
#include <stdio.h>

#define Fosc 48000000UL

void InitUART(unsigned int baudrate)
{
  TRISCbits.RC6 = 0;
  TRISCbits.RC7 = 1;

  SPBRG = (unsigned char)(((Fosc /64)/baudrate)-1);
  BAUDCON = 0b00000000;

  TXSTA = 0b00100000;
  RCSTA = 0b10010000;
}

void SendChar(unsigned char data)
{
    while(TXSTAbits.TRMT == 0);

    TXREG = data;
}

void put(unsigned char data)
{
    SendChar(data);
}

unsigned char GetChar(void)
{
    while(!PIR1bits.RCIF);
    return RCREG;
}

void main(void)
{
    InitUART(9600);

    printf("\r\nHello MicroPIC-18F: Enter any Key from Keyboard\r\n");

    while(1)
    {
        printf("%c ",GetChar());
    }

    while(1);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------
12. Arduino UNO LED 

#define LED_PIN 9
#define BUTTON_PIN 2

void setup() {
  pinMode(LED_PIN, OUTPUT);
  pinMode(BUTTON_PIN, INPUT_PULLUP);
}

void loop() {
  if (digitalRead(BUTTON_PIN) == HIGH) {
    int potValue = analogRead(A0);
    int brightness = map(potValue, 0, 1023, 0, 255);
    analogWrite(LED_PIN, brightness); 
  } else {
    analogWrite(LED_PIN, 0);
  }
}

